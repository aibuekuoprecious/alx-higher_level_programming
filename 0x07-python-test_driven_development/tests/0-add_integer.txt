# Tests for the 0-add_integer module
"""
This module provides a function add_integer() that accepts an integer or float and returns the sum as an integer.
An exception is raised if the argument is not an int or float.
"""

# Import the add_integer() function
add_integer = __import__("0-add_integer").add_integer

# Checking for module docstring
mod_string = __import__("0-add_integer").__doc__
assert len(mod_string) > 5

# Checking for function docstring
fun_docs = add_integer.__doc__
assert len(fun_docs) > 5

# Test cases for adding integers
assert add_integer(3, 2) == 5
assert add_integer(20000, 40000) == 60000
assert add_integer(-4, -2) == -6
assert add_integer(1, -3) == -2

# Test cases for adding floats
assert add_integer(2.43, 0.32) == 2
assert add_integer(4.0/2.0, 5) == 7

# Test cases for handling invalid float inputs
try:
    add_integer(5.0, float("nan"))
except ValueError as e:
    assert str(e) == "cannot convert float NaN to integer"

try:
    add_integer(float("inf"), 3)
except OverflowError as e:
    assert str(e) == "cannot convert float infinity to integer"

# Test cases for handling invalid inputs
try:
    add_integer(" ", 5)
except TypeError as e:
    assert str(e) == "a must be an integer"

try:
    add_integer("cup")
except TypeError as e:
    assert str(e) == "a must be an integer"

try:
    add_integer(20, "ten")
except TypeError as e:
    assert str(e) == "b must be an integer"

try:
    add_integer(1, [])
except TypeError as e:
    assert str(e) == "b must be an integer"

try:
    add_integer([2, 1, 4], [1,2,3])
except TypeError as e:
    assert str(e) == "a must be an integer"

try:
    add_integer({"add": 3}, float(5))
except TypeError as e:
    assert str(e) == "a must be an integer"

try:
    add_integer(True, 3)
except TypeError as e:
    assert str(e) == "a must be an integer"

# Test case for handling extra arguments
try:
    add_integer(2, 3, 50)
except TypeError as e:
    assert str(e) == "add_integer() takes from 1 to 2 positional arguments but 3 were given"

# Test case for handling no arguments
try:
    add_integer()
except TypeError as e:
    assert str(e) == "add_integer() missing 1 required positional argument: 'a'"

# Test cases for other data types
try:
    add_integer("hey", 20)
except TypeError as e:
    assert str(e) == "a must be an integer"

try:
    add_integer(20, (0,0))
except TypeError as e:
    assert str(e) == "b must be an integer"

# Test case for mixing float and int
assert add_integer(1.1, 20) == 21

# Test case for negative numbers
assert add_integer(-20, 30) == 10

# Test case for empty input
try:
    add_integer()
except TypeError as e:
    assert str(e) == "a must be an integer"

