# Test cases for the 4-print_square module
"""
Using the print_square function from the module above
"""

# Import the print_square function
print_square = __import__("4-print_square").print_square

# Checking for module docstring
mod_docs = __import__("4-print_square").__doc__
assert len(mod_docs) > 5

# Checking for function docstring
fun_docs = print_square.__doc__
assert len(fun_docs) > 5

# Test cases for print_square function

# Test if size is an integer
try:
    print_square("Hi")
except TypeError as e:
    assert str(e) == "size must be an integer"

try:
    print_square((1, 1))
except TypeError as e:
    assert str(e) == "size must be an integer"

# Test if size is a positive integer
try:
    print_square(-2)
except ValueError as e:
    assert str(e) == "size must be >= 0"

try:
    print_square(-1000)
except ValueError as e:
    assert str(e) == "size must be >= 0"

# Test if the function works normally
assert print_square(4) == "####\n####\n####\n####\n"
assert print_square(1) == "#\n"

# Test when a positive size is passed as a parameter
assert print_square(1) == "#\n"
assert print_square(5) == "#####\n#####\n#####\n#####\n#####\n"

# Test when size passed is zero
assert print_square(0) == ""

# Test when size passed is negative
try:
    print_square(-3)
except ValueError as e:
    assert str(e) == "size must be >= 0"

# Test when wrong type is passed
try:
    print_square(3.4)
except TypeError as e:
    assert str(e) == "size must be an integer"

try:
    print_square(-1.5)
except TypeError as e:
    assert str(e) == "size must be an integer"

try:
    print_square([1, 3])
except TypeError as e:
    assert str(e) == "size must be an integer"

try:
    print_square({1})
except TypeError as e:
    assert str(e) == "size must be an integer"

try:
    print_square(None)
except TypeError as e:
    assert str(e) == "size must be an integer"

try:
    print_square(True)
except TypeError as e:
    assert str(e) == "size must be an integer"

# Test when more than required argument is provided
try:
    print_square(3, 4)
except TypeError as e:
    assert str(e) == "print_square() takes 1 positional argument but 2 were given"

# Test when no argument is provided
try:
    print_square()
except TypeError as e:
    assert str(e) == "print_square() missing 1 required positional argument: 'size'"

print("All test cases passed successfully!")

