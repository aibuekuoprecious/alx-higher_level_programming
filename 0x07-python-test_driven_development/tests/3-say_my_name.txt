# Test cases for the 3-say_my_name module
"""
Using the say_my_name function from the module above
"""

# Import the say_my_name function
say_my_name = __import__("3-say_my_name").say_my_name

# Checking for module docstring
mod_docs = __import__("3-say_my_name").__doc__
assert len(mod_docs) > 5

# Checking for function docstring
fun_docs = say_my_name.__doc__
assert len(fun_docs) > 5

# Test cases for say_my_name function

# Test if first name is a string
try:
    say_my_name(10, "tom")
except TypeError as e:
    assert str(e) == "first_name must be a string"

# Test if last name is a string
try:
    say_my_name("ade", (0, 0))
except TypeError as e:
    assert str(e) == "last_name must be a string"

# Test if function displays the strings well in the message
assert say_my_name("John", "Smith") == "My name is John Smith"
assert say_my_name("Walter", "White") == "My name is Walter White"
assert say_my_name("Bob") == "My name is Bob"

# Test when firstname and lastname are passed
assert say_my_name("Valentine", "Maduagwu") == "My name is Valentine Maduagwu"
assert say_my_name('V', 'M') == "My name is V M"

# Test when only firstname is passed
assert say_my_name("Valentine") == "My name is Valentine"
assert say_my_name("Alex") == "My name is Alex"

# Test when only lastname is passed
try:
    say_my_name(last_name="Maduagwu")
except TypeError as e:
    assert str(e) == "say_my_name() missing 1 required positional argument: 'first_name'"

# Test when no argument is provided
try:
    say_my_name()
except TypeError as e:
    assert str(e) == "say_my_name() missing 1 required positional argument: 'first_name'"

# Test when wrong type is provided for first_name
try:
    say_my_name(13)
except TypeError as e:
    assert str(e) == "first_name must be a string"

try:
    say_my_name(19.39)
except TypeError as e:
    assert str(e) == "first_name must be a string"

try:
    say_my_name(['John', 'Chris'], 'Val')
except TypeError as e:
    assert str(e) == "first_name must be a string"

try:
    say_my_name({'amy', 13}, "Alex")
except TypeError as e:
    assert str(e) == "first_name must be a string"

# Test when wrong type is provided for last_name
try:
    say_my_name("Valentine", 23)
except TypeError as e:
    assert str(e) == "last_name must be a string"

try:
    say_my_name("Valentine", ["Alex", "John"])
except TypeError as e:
    assert str(e) == "last_name must be a string"

try:
    say_my_name("Hitman", 47.70)
except TypeError as e:
    assert str(e) == "last_name must be a string"

try:
    say_my_name("Valentine", {"Hitman": 47})
except TypeError as e:
    assert str(e) == "last_name must be a string"

# Test when None is passed
try:
    say_my_name("Valentine", None)
except TypeError as e:
    assert str(e) == "last_name must be a string"

try:
    say_my_name(None)
except TypeError as e:
    assert str(e) == "first_name must be a string"

print("All test cases passed successfully!")

