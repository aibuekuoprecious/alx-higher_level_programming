# Test cases for the 5-text_indentation module
"""
Using the text_indentation function from the module above
"""

# Import the text_indentation function
text_indentation = __import__("5-text_indentation").text_indentation

# Checking for module docstring
mod_docs = __import__("5-text_indentation").__doc__
assert len(mod_docs) > 5

# Checking for function docstring
fun_docs = text_indentation.__doc__
assert len(fun_docs) > 5

# Test cases for text_indentation function

# Test if text is not a string
try:
    text_indentation(20)
except TypeError as e:
    assert str(e) == "text must be a string"

try:
    text_indentation(["let's", "go"])
except TypeError as e:
    assert str(e) == "text must be a string"

# Test if function works well
expected_output = "this is:\n\na text.\n\nto test right ?\n\n"
assert text_indentation("this is: a text. to test right ?") == expected_output

# Test regular implementation of text_indentation function
expected_output = """Lorem ipsum dolor sit amet, consectetur adipiscing elit.
<BLANKLINE>
Quonam modo?
<BLANKLINE>
Utrum igitur tibi litteram videor an totas paginas commovere?
<BLANKLINE>
Non autem hoc:
<BLANKLINE>
igitur ne illud quidem.
<BLANKLINE>
Fortasse id optimum, sed ubi illud:
<BLANKLINE>
Plus semper voluptatis?
<BLANKLINE>
Teneo, inquit, finem illi videri nihil dolere.
<BLANKLINE>
Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.
<BLANKLINE>
Si id dicis, vicimus.
<BLANKLINE>
Inde sermone vario sex illa a Dipylo stadia confecimus.
<BLANKLINE>
Sin aliud quid voles, postea.
<BLANKLINE>
Quae animi affectio suum cuique tribuens atque hanc, quam dico.
<BLANKLINE>
Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres
"""
assert (
    text_indentation(
        """Lorem ipsum dolor sit amet, consectetur adipiscing elit. \
Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? \
Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: \
Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. \
Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum \
rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo \
stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum \
cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio \
beatiorem! Iam ruinas videres"""
    )
    == expected_output
)

expected_output = "Hello.\n\nHow are you?\n\n"
assert text_indentation("   Hello.  How are you?   ") == expected_output

expected_output = ".\n\n?\n\n:\n\n"
assert text_indentation(" . ? : ") == expected_output

assert text_indentation("Hello") == "Hello"

expected_output = "\n\n Hello.\n\nWhatcha up to?\n\n"
assert text_indentation(" \n Hello. Whatcha up to?") == expected_output

expected_output = "Hello, how are you?\n\n\n\n"
assert text_indentation("Hello, how are you?\n") == expected_output

# Test when wrong type is passed
try:
    text_indentation(340)
except TypeError as e:
    assert str(e) == "text must be a string"

try:
    text_indentation(["sarah ?"])
except TypeError as e:
    assert str(e) == "text must be a string"

try:
    text_indentation(("Hello", 30))
except TypeError as e:
    assert str(e) == "text must be a string"

# Test when None is passed
try:
    text_indentation(None)
except TypeError as e:
    assert str(e) == "text must be a string"

# Test when no argument is passed
try:
    text_indentation()
except TypeError as e:
    assert str(e) == "text_indentation() missing 1 required positional argument: 'text'"

# Test when more than required arguments are passed
try:
    text_indentation("hello", "world")
except TypeError as e:
    assert str(e) == "text_indentation() takes 1 positional argument but 2 were given"

print("All test cases passed successfully!")

