# Test cases for the 2-matrix_divided module
"""
Using the function matrix_divided from the module above
"""

# Import the matrix_divided function
matrix_divided = __import__("2-matrix_divided").matrix_divided

# Checking for module docstring
mod_docs = __import__("2-matrix_divided").__doc__
assert len(mod_docs) > 5

# Checking for function docstring
fun_docs = matrix_divided.__doc__
assert len(fun_docs) > 5

# Test cases for matrix_divided function

# Test for strings in the list
matrix = [[1, 2, 3], "tommy", "yeah"]
try:
    matrix_divided(matrix, 4)
except TypeError as e:
    assert str(e) == "matrix must be a matrix (list of lists) of integers/floats"

# Test for size of lists in 2D list
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]
try:
    matrix_divided(matrix, 4)
except TypeError as e:
    assert str(e) == "Each row of the matrix must have the same size"

# Test for type of divisor passed in
matrix = [[1, 2, 3], [4, 5, 6]]
try:
    matrix_divided(matrix, "yeah")
except TypeError as e:
    assert str(e) == "div must be a number"

# Test if divisor is 0
try:
    matrix_divided(matrix, 0)
except ZeroDivisionError as e:
    assert str(e) == "division by zero"

# Test if code runs well
assert matrix_divided(matrix, 3) == [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test for empty 2D list
matrix = [[]]
assert matrix_divided(matrix, 4) == [[]]

# Test for content of list
matrix = [[1, True, "hey"], [2, 3, False]]
try:
    matrix_divided(matrix, 3)
except TypeError as e:
    assert str(e) == "matrix must be a matrix (list of lists) of integers/floats"

# Test if matrix is a list of lists
matrix = [1, 2, 3]
try:
    matrix_divided(matrix, 3)
except TypeError as e:
    assert str(e) == "matrix must be a matrix (list of lists) of integers/floats"

matrix = [[1, 4, 5], "School"]
try:
    matrix_divided(matrix, 1)
except TypeError as e:
    assert str(e) == "matrix must be a matrix (list of lists) of integers/floats"

matrix = [[1, [1, 2], 3], [1, 4, 5]]
try:
    matrix_divided(matrix, 1)
except TypeError as e:
    assert str(e) == "matrix must be a matrix (list of lists) of integers/floats"

# Test if rows have the same size
matrix = [[1, 2, 3], [1, 2]]
try:
    matrix_divided(matrix, 4)
except TypeError as e:
    assert str(e) == "Each row of the matrix must have the same size"

matrix = [[1, 2], [1, 2, 3], [53, 23, 34]]
try:
    matrix_divided(matrix, 4)
except TypeError as e:
    assert str(e) == "Each row of the matrix must have the same size"

# Test if divisor is zero
matrix = [[1, 3, 4, 5]]
try:
    matrix_divided(matrix, 0)
except ZeroDivisionError as e:
    assert str(e) == "division by zero"

# Test when None is passed
try:
    matrix_divided([[1, 2, 4]], None)
except TypeError as e:
    assert str(e) == "div must be a number"

try:
    matrix_divided(None, 2)
except TypeError as e:
    assert str(e) == "matrix must be a matrix (list of lists) of integers/floats"

# Test when boolean is passed
try:
    matrix_divided([[4, 29, 15]], True)
except TypeError as e:
    assert str(e) == "div must be a number"

try:
    matrix_divided(True, 2)
except TypeError as e:
    assert str(e) == "matrix must be a matrix (list of lists) of integers/floats"

# Test other data structures such as tuples, sets, and dicts
matrix = ((2, 3, 5), [2, 5, 1])
try:
    matrix_divided(matrix, 20)
except TypeError as e:
    assert str(e) == "matrix must be a matrix (list of lists) of integers/floats"

matrix = [[2, 4, 5], {3, 2, 5}]
try:
    matrix_divided(matrix, 2)
except TypeError as e:
    assert str(e) == "matrix must be a matrix (list of lists) of integers/floats"

matrix = [{"amy": 2}, [4, 5, 3]]
try:
    matrix_divided(matrix, 2)
except TypeError as e:
    assert str(e) == "matrix must be a matrix (list of lists) of integers/floats"

# Test when less than two arguments are passed
try:
    matrix_divided([[2, 5, 13], [21, 4, 42]])
except TypeError as e:
    assert str(e) == "matrix_divided() missing 1 required positional argument: 'div'"

try:
    matrix_divided()
except TypeError as e:
    assert str(e) == "matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'"

print("All test cases passed successfully!")


